{"version":3,"sources":["webpack:///webpack/bootstrap 2a17835ca84fe8a83483","webpack:///external \"require3\"","webpack:///./backend/src/main.js","webpack:///./backend/src/routes.js","webpack:///./backend/src/controller/version.js","webpack:///./backend/src/services.js","webpack:///./backend/src/service/version.js","webpack:///./backend/src/config/config.js","webpack:///./backend/src/config/locales.js","webpack:///./backend/src/config/locale/zh-cn.js","webpack:///./backend/src/config/errors.js","webpack:///./backend/src/config/constants.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA,qC;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnBA;;AAEA;AACA,GAAG,wFAAwF;AAC3F,GAAG,wFAAwF;AAC3F,GAAG,2GAA2G;AAC9G,GAAG,yGAAyG;AAC5G,GAAG,yGAAyG;AAC5G,GAAG,yFAAyF;AAC5F,MAAM,wFAAwF;AAC9F;;;;;;;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,2EAA2E,GAAG,EAAE,KAAK;AACrF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACrGA;;AAEA;AACA;AACA;;;;;;;ACJA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,4CAA4C,2BAA2B;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,kDAAkD;;AAElD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,iBAAiB;AACjB;;AAEA;;AAEA;AACA;;;;;;;AC7RA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2a17835ca84fe8a83483","module.exports = require(\"require3\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"require3\"\n// module id = 0\n// module chunks = 0","const routes = require('./routes.js');\nconst services = require('./services.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst constants = require('./config/constants.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n\n  return {\n    routes,\n    services,\n    config,\n    locales,\n    errors,\n    constants,\n  };\n\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./backend/src/main.js\n// module id = 1\n// module chunks = 0","const version = require('./controller/version.js');\n\nmodule.exports = [\n  { method: 'post', path: 'version/start', controller: version, middlewares: 'safeAccess' },\n  { method: 'post', path: 'version/check', controller: version, middlewares: 'safeAccess' },\n  { method: 'post', path: 'version/updateModule', controller: version, middlewares: 'safeAccess,transaction' },\n  { method: 'post', path: 'version/initModule', controller: version, middlewares: 'safeAccess,transaction' },\n  { method: 'post', path: 'version/testModule', controller: version, middlewares: 'safeAccess,transaction' },\n  { method: 'post', path: 'version/update', controller: version, middlewares: 'safeAccess' },\n  // { method: 'get', path: 'version/result', controller: version, middlewares: 'safeAccess' },\n];\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./backend/src/routes.js\n// module id = 2\n// module chunks = 0","const require3 = require('require3');\nconst chalk = require3('chalk');\n\nmodule.exports = app => {\n  class VersionController extends app.Controller {\n\n    async start() {\n      // update all modules\n      let result;\n      try {\n        result = await this.ctx.performAction({\n          method: 'post',\n          url: 'version/check',\n        });\n        if (Object.keys(result).length > 0) console.log(result);\n        console.log(chalk.cyan('  All modules are checked successfully!'));\n      } catch (err) {\n        console.log(chalk.cyan('  Modules are checked failed!'));\n        throw err;\n      }\n\n      // init all subdomains\n      if (result && Object.keys(result).length > 0) {\n        try {\n          const rows = await this.ctx.db.query('select distinct subdomain from aVersionInit');\n          for (const row of rows) {\n            await this.ctx.performAction({\n              method: 'post',\n              url: 'version/check',\n              body: {\n                subdomain: row.subdomain,\n                scene: 'init',\n              },\n            });\n          }\n\n          console.log(chalk.cyan('  All subdomains are initialized successfully!'));\n        } catch (err) {\n          console.log(chalk.cyan('  Subdomains are initialized failed!'));\n          throw err;\n        }\n      }\n\n      // ok\n      // console.log(chalk.yellow('  For more details, please goto http://{ip}:{port}/#/a/version/check\\n'));\n      this.ctx.success();\n    }\n\n    // check all modules\n    async check() {\n      // options:\n      //   scene:init\n      //   scene:test\n      const options = this.ctx.request.body;\n      options.result = {};\n      await this.service.version.check(options);\n      this.ctx.success(options.result);\n    }\n\n    // update module\n    async updateModule() {\n      await this.service.version.updateModule(\n        this.ctx.request.body.module,\n        this.ctx.getInt('version')\n      );\n      this.ctx.success();\n    }\n\n    // init module\n    async initModule() {\n      await this.service.version.initModule(\n        this.ctx.request.body,\n        this.ctx.request.body.module,\n        this.ctx.getInt('version')\n      );\n      this.ctx.success();\n    }\n\n    // test module\n    async testModule() {\n      await this.service.version.testModule(\n        this.ctx.request.body\n      );\n      this.ctx.success();\n    }\n\n    // update this module\n    async update() {\n      await this.service.version.update(this.ctx.getInt('version'));\n      this.ctx.success();\n    }\n\n    // // result\n    // async result() {\n    //   if (app.config.env !== 'local') this.ctx.throw(1003);\n    //   const res = this.service.version.result();\n    //   this.ctx.success(res);\n    // }\n\n  }\n  return VersionController;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./backend/src/controller/version.js\n// module id = 3\n// module chunks = 0","const version = require('./service/version.js');\n\nmodule.exports = {\n  version,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./backend/src/services.js\n// module id = 4\n// module chunks = 0","const require3 = require('require3');\nconst semver = require3('semver');\n\nmodule.exports = app => {\n\n  class Version extends app.Service {\n\n    async check(options) {\n\n      if (!options.scene) {\n        // confirm table aVersion exists\n        const res = await this.ctx.db.queryOne('show tables like \\'aVersion\\'');\n        if (!res) {\n          await this.ctx.db.query(`\n          CREATE TABLE aVersion (\n            id INT NOT NULL AUTO_INCREMENT,\n            module VARCHAR(50) NULL,\n            version INT NULL,\n            createdAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            PRIMARY KEY (id));\n          `);\n        }\n      }\n\n      // reset all modules\n      this.__resetAllModules();\n\n      // check module of aVersion\n      await this.__checkModule('a-version', options);\n\n      // check other modules\n      await this.__checkOtherModules(options);\n    }\n\n    // update module\n    async updateModule(module, version) {\n\n      // update\n      await this.ctx.performAction({\n        method: 'post',\n        url: `/${module.info.url}/version/update`,\n        body: {\n          version,\n        },\n      });\n\n      // insert record\n      if (version > 0) {\n        await this.ctx.db.insert('aVersion', {\n          module: module.info.relativeName,\n          version,\n        });\n      }\n\n    }\n\n    // init module\n    async initModule(options, module, version) {\n\n      // init\n      try {\n        await this.ctx.performAction({\n          method: 'post',\n          url: `/${module.info.url}/version/init`,\n          body: options,\n        });\n      } catch (e) {\n        if (e.code !== 404) throw e;\n      }\n\n      // insert record\n      if (version > 0) {\n        await this.ctx.db.insert('aVersionInit', {\n          subdomain: options.subdomain,\n          module: module.info.relativeName,\n          version,\n        });\n      }\n\n    }\n\n    // test module\n    async testModule(options) {\n\n      // test\n      try {\n        await this.ctx.performAction({\n          method: 'post',\n          url: `/${options.module.info.url}/version/test`,\n          body: options,\n        });\n      } catch (e) {\n        if (e.code !== 404) throw e;\n      }\n\n    }\n\n\n    // update this module\n    async update(version) {\n\n      if (version === 1) {\n        // do nothing\n      }\n\n      if (version === 2) {\n        await this.ctx.db.query(`\n          CREATE TABLE aVersionInit (\n            id INT NOT NULL AUTO_INCREMENT,\n            subdomain VARCHAR(50) NULL,\n            module VARCHAR(50) NULL,\n            version INT NULL,\n            createdAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            PRIMARY KEY (id));\n          `);\n      }\n\n    }\n\n    // reset all modules\n    __resetAllModules() {\n      const keys = Object.keys(this.app.meta.modules);\n      for (const key of keys) {\n        const module = this.app.meta.modules[key];\n        module.__checking = false;\n      }\n    }\n\n    // check other modules\n    async __checkOtherModules(options) {\n      const keys = Object.keys(this.app.meta.modules);\n      for (const key of keys) {\n        if (key !== 'a-version') {\n          await this.__checkModule(key, options);\n        }\n      }\n    }\n\n    // check module\n    async __checkModule(moduleName, options) {\n\n      // module\n      const module = this.__getModule(moduleName);\n      if (module.__checking) return;\n      module.__checking = true;\n\n      // dependencies\n      await this.__checkDependencies(module, options);\n\n      // fileVersionNew\n      let fileVersionNew = 0;\n      if (module.package.eggBornModule && module.package.eggBornModule.fileVersion) {\n        fileVersionNew = module.package.eggBornModule.fileVersion;\n      }\n\n      if (fileVersionNew && (!options.scene || options.scene === 'init')) {\n        // update module or init module\n\n        // fileVersionOld\n        let fileVersionOld = 0; // default\n        if (!options.scene) {\n          const res = await this.ctx.db.queryOne('select * from aVersion where module=? order by version desc', [ moduleName ]);\n          if (res) {\n            fileVersionOld = res.version;\n          }\n        } else {\n          const res = await this.ctx.db.queryOne('select * from aVersionInit where subdomain=? and module=? order by version desc', [ options.subdomain, moduleName ]);\n          if (res) {\n            fileVersionOld = res.version;\n          }\n        }\n\n        // check if need update\n        if (fileVersionOld > fileVersionNew) {\n          // module is old\n          module.__check = this.ctx.parseFail(1001);\n          this.ctx.throw(1001);\n        } else if (fileVersionOld < fileVersionNew) {\n          await this.__updateModule(options, module, fileVersionOld, fileVersionNew);\n        }\n      }\n\n      if (options.scene === 'test') {\n        // test module\n        await this.__testModule(module, fileVersionNew, options);\n      }\n\n    }\n\n    // check dependencies\n    async __checkDependencies(module, options) {\n\n      if (!module.package.eggBornModule || !module.package.eggBornModule.dependencies) return;\n\n      const dependencies = module.package.eggBornModule.dependencies;\n      const keys = Object.keys(dependencies);\n      for (const key of keys) {\n        const subModule = this.__getModule(key);\n        if (!subModule) {\n          module.__check = this.ctx.parseFail(1002, key);\n          this.ctx.throw(1002, key);\n        }\n        const subModuleVersion = dependencies[key];\n        if (semver.lt(subModule.package.version, subModuleVersion)) {\n          subModule.__check = this.ctx.parseFail(1001);\n          this.ctx.throw(1001);\n        }\n        await this.__checkModule(key, options);\n      }\n\n    }\n\n    // update module or init module\n    async __updateModule(options, module, fileVersionOld, fileVersionNew) {\n\n      // versions\n      const versions = [];\n      for (let version = fileVersionOld + 1; version <= fileVersionNew; version++) {\n        versions.push(version);\n      }\n\n      // loop\n      for (const version of versions) {\n        // perform action\n        try {\n          if (!options.scene) {\n            await this.ctx.performAction({\n              method: 'post',\n              url: 'version/updateModule',\n              body: {\n                module,\n                version,\n              },\n            });\n          } else {\n            options.module = module;\n            options.version = version;\n            await this.ctx.performAction({\n              method: 'post',\n              url: 'version/initModule',\n              body: options,\n            });\n          }\n        } catch (err) {\n          module.__check = err;\n          throw err;\n        }\n      }\n\n      // log\n      options.result[module.info.relativeName] = { fileVersionOld, fileVersionNew };\n\n    }\n\n    // test module\n    async __testModule(module, fileVersionNew, options) {\n      options.module = module;\n      options.version = fileVersionNew;\n\n      await this.ctx.performAction({\n        method: 'post',\n        url: 'version/testModule',\n        body: options,\n      });\n    }\n\n    // get module\n    __getModule(moduleName) {\n      return this.app.meta.modules[moduleName];\n    }\n\n    // // result\n    // result() {\n    //   // find error module\n    //   const moduleName = Object.keys(this.app.meta.modules).find(key => this.app.meta.modules[key].__check);\n    //   if (moduleName) return { module: this.app.meta.modules[moduleName], modules: null };\n    //   // ok\n    //   return { module: null, modules: this.app.meta.modules };\n    // }\n\n  }\n\n  return Version;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./backend/src/service/version.js\n// module id = 5\n// module chunks = 0","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n  return config;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./backend/src/config/config.js\n// module id = 6\n// module chunks = 0","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./backend/src/config/locales.js\n// module id = 7\n// module chunks = 0","module.exports = {\n  'module is old': '模块过旧',\n  'module %s not exists': '模块%s不存在',\n  'The module only run in development mode': '此模块只能在开发模式下运行',\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./backend/src/config/locale/zh-cn.js\n// module id = 8\n// module chunks = 0","module.exports = {\n  1001: 'module is old',\n  1002: 'module %s not exists',\n  1003: 'The module only run in development mode',\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./backend/src/config/errors.js\n// module id = 9\n// module chunks = 0","module.exports = {\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./backend/src/config/constants.js\n// module id = 10\n// module chunks = 0"],"sourceRoot":""}