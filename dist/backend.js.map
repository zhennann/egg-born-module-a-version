{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/external \"require3\"","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/constants.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;AClFA,eAAe,mBAAO,CAAC,CAAa;AACpC,iBAAiB,mBAAO,CAAC,CAAe;AACxC,eAAe,mBAAO,CAAC,CAAoB;AAC3C,gBAAgB,mBAAO,CAAC,CAAqB;AAC7C,eAAe,mBAAO,CAAC,CAAoB;AAC3C,kBAAkB,mBAAO,CAAC,EAAuB;;AAEjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnBA,gBAAgB,mBAAO,CAAC,CAAyB;;AAEjD;AACA,GAAG,mFAAmF;AACtF,GAAG,mFAAmF;AACtF,GAAG,sGAAsG;AACzG,GAAG,oGAAoG;AACvG,GAAG,oGAAoG;AACvG,GAAG,oFAAoF;AACvF;;;;;;;ACTA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,oDAAoD,8BAA8B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;;AAEA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,2EAA2E,GAAG,EAAE,KAAK;AACrF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AC7FA,qC;;;;;;ACAA,gBAAgB,mBAAO,CAAC,CAAsB;;AAE9C;AACA;AACA;;;;;;;ACJA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,8CAA8C,2BAA2B;AACzE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD;;AAElD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC3OA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA,WAAW,mBAAO,CAAC,CAAmB;AACtC;;;;;;;ACFA;AACA;AACA;;;;;;;ACFA;AACA;AACA;;;;;;;ACFA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const routes = require('./routes.js');\nconst services = require('./services.js');\nconst config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst constants = require('./config/constants.js');\n\n// eslint-disable-next-line\nmodule.exports = app => {\n\n  return {\n    routes,\n    services,\n    config,\n    locales,\n    errors,\n    constants,\n  };\n\n};\n","const version = require('./controller/version.js');\n\nmodule.exports = [\n  { method: 'post', path: 'version/start', controller: version, middlewares: 'inner' },\n  { method: 'post', path: 'version/check', controller: version, middlewares: 'inner' },\n  { method: 'post', path: 'version/updateModule', controller: version, middlewares: 'inner,transaction' },\n  { method: 'post', path: 'version/initModule', controller: version, middlewares: 'inner,transaction' },\n  { method: 'post', path: 'version/testModule', controller: version, middlewares: 'inner,transaction' },\n  { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n];\n","const require3 = require('require3');\nconst chalk = require3('chalk');\n\nmodule.exports = app => {\n  class VersionController extends app.Controller {\n\n    async start() {\n      // update all modules\n      let result;\n      try {\n        result = await this.ctx.performAction({\n          method: 'post',\n          url: 'version/check',\n        });\n        if (Object.keys(result).length > 0) console.log(result);\n        console.log(chalk.cyan('  All modules are checked successfully!'));\n      } catch (err) {\n        console.log(chalk.cyan('  Modules are checked failed!'));\n        throw err;\n      }\n\n      // init all instances\n      try {\n        const instances = app.config.instances || [{ subdomain: '', password: '' }];\n        for (const instance of instances) {\n          await this.ctx.performAction({\n            subdomain: instance.subdomain,\n            method: 'post',\n            url: 'version/check',\n            body: {\n              ...instance,\n              scene: 'init',\n            },\n          });\n        }\n\n        console.log(chalk.cyan('  All instances are initialized successfully!'));\n      } catch (err) {\n        console.log(chalk.cyan('  Instances are initialized failed!'));\n        throw err;\n      }\n\n      // ok\n      // console.log(chalk.yellow('  For more details, please goto http://{ip}:{port}/#/a/version/check\\n'));\n      this.ctx.success();\n    }\n\n    // check all modules\n    async check() {\n      // options:\n      //   scene:init\n      //   scene:test\n      const options = this.ctx.request.body || {};\n      options.result = {};\n      await this.service.version.check(options);\n      this.ctx.success(options.result);\n    }\n\n    // update module\n    async updateModule() {\n      await this.service.version.updateModule(\n        this.ctx.request.body.module,\n        this.ctx.getInt('version')\n      );\n      this.ctx.success();\n    }\n\n    // init module\n    async initModule() {\n      await this.service.version.initModule(\n        this.ctx.request.body,\n        this.ctx.request.body.module,\n        this.ctx.getInt('version')\n      );\n      this.ctx.success();\n    }\n\n    // test module\n    async testModule() {\n      await this.service.version.testModule(\n        this.ctx.request.body\n      );\n      this.ctx.success();\n    }\n\n    // update this module\n    async update() {\n      await this.service.version.update(this.ctx.getInt('version'));\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","module.exports = require(\"require3\");","const version = require('./service/version.js');\n\nmodule.exports = {\n  version,\n};\n","module.exports = app => {\n\n  class Version extends app.Service {\n\n    async check(options) {\n\n      if (!options.scene) {\n        // confirm table aVersion exists\n        const res = await this.ctx.db.queryOne('show tables like \\'aVersion\\'');\n        if (!res) {\n          await this.ctx.db.query(`\n          CREATE TABLE aVersion (\n            id INT NOT NULL AUTO_INCREMENT,\n            module VARCHAR(50) NULL,\n            version INT NULL,\n            createdAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            PRIMARY KEY (id));\n          `);\n        }\n      }\n\n      // check all modules\n      for (const module of this.app.meta.modulesArray) {\n        await this.__checkModule(module.info.relativeName, options);\n      }\n\n    }\n\n    // update module\n    async updateModule(module, version) {\n\n      // update\n      await this.ctx.performAction({\n        method: 'post',\n        url: `/${module.info.url}/version/update`,\n        body: {\n          version,\n        },\n      });\n\n      // insert record\n      if (version > 0) {\n        await this.ctx.db.insert('aVersion', {\n          module: module.info.relativeName,\n          version,\n        });\n      }\n\n    }\n\n    // init module\n    async initModule(options, module, version) {\n\n      // init\n      try {\n        await this.ctx.performAction({\n          method: 'post',\n          url: `/${module.info.url}/version/init`,\n          body: options,\n        });\n      } catch (e) {\n        if (e.code !== 404) throw e;\n      }\n\n      // insert record\n      if (version > 0) {\n        await this.ctx.db.insert('aVersionInit', {\n          subdomain: options.subdomain,\n          module: module.info.relativeName,\n          version,\n        });\n      }\n\n    }\n\n    // test module\n    async testModule(options) {\n\n      // test\n      try {\n        await this.ctx.performAction({\n          method: 'post',\n          url: `/${options.module.info.url}/version/test`,\n          body: options,\n        });\n      } catch (e) {\n        if (e.code !== 404) throw e;\n      }\n\n    }\n\n\n    // update this module\n    async update(version) {\n\n      if (version === 1) {\n        // do nothing\n      }\n\n      if (version === 2) {\n        await this.ctx.db.query(`\n          CREATE TABLE aVersionInit (\n            id INT NOT NULL AUTO_INCREMENT,\n            subdomain VARCHAR(50) NULL,\n            module VARCHAR(50) NULL,\n            version INT NULL,\n            createdAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            PRIMARY KEY (id));\n          `);\n      }\n\n    }\n\n    // check module\n    async __checkModule(moduleName, options) {\n\n      // module\n      const module = this.__getModule(moduleName);\n\n      // fileVersionNew\n      let fileVersionNew = 0;\n      if (module.package.eggBornModule && module.package.eggBornModule.fileVersion) {\n        fileVersionNew = module.package.eggBornModule.fileVersion;\n      }\n\n      if (fileVersionNew && (!options.scene || options.scene === 'init')) {\n        // update module or init module\n\n        // -1: always\n        if (fileVersionNew === -1) {\n          await this.__updateModule(options, module, -1, -1);\n        } else {\n          // fileVersionOld\n          let fileVersionOld = 0; // default\n          if (!options.scene) {\n            const res = await this.ctx.db.queryOne('select * from aVersion where module=? order by version desc', [ moduleName ]);\n            if (res) {\n              fileVersionOld = res.version;\n            }\n          } else {\n            const res = await this.ctx.db.queryOne('select * from aVersionInit where subdomain=? and module=? order by version desc', [ options.subdomain, moduleName ]);\n            if (res) {\n              fileVersionOld = res.version;\n            }\n          }\n\n          // check if need update\n          if (fileVersionOld > fileVersionNew) {\n            this.ctx.throw(1001, moduleName);\n          } else if (fileVersionOld < fileVersionNew) {\n            await this.__updateModule(options, module, fileVersionOld, fileVersionNew);\n          }\n        }\n\n      }\n\n      if (options.scene === 'test') {\n        // test module\n        await this.__testModule(module, fileVersionNew, options);\n      }\n\n    }\n\n    async __updateModule2(options, module, version) {\n      // perform action\n      try {\n        if (!options.scene) {\n          await this.ctx.performAction({\n            method: 'post',\n            url: 'version/updateModule',\n            body: {\n              module,\n              version,\n            },\n          });\n        } else {\n          options.module = module;\n          options.version = version;\n          await this.ctx.performAction({\n            method: 'post',\n            url: 'version/initModule',\n            body: options,\n          });\n        }\n      } catch (err) {\n        throw err;\n      }\n    }\n\n    // update module or init module\n    async __updateModule(options, module, fileVersionOld, fileVersionNew) {\n\n      if (fileVersionNew === -1) {\n        // always\n        await this.__updateModule2(options, module, -1);\n      } else {\n        // versions\n        const versions = [];\n        for (let version = fileVersionOld + 1; version <= fileVersionNew; version++) {\n          versions.push(version);\n        }\n\n        // loop\n        for (const version of versions) {\n          await this.__updateModule2(options, module, version);\n        }\n      }\n\n      // log\n      options.result[module.info.relativeName] = { fileVersionOld, fileVersionNew };\n\n    }\n\n    // test module\n    async __testModule(module, fileVersionNew, options) {\n      options.module = module;\n      options.version = fileVersionNew;\n\n      await this.ctx.performAction({\n        method: 'post',\n        url: 'version/testModule',\n        body: options,\n      });\n    }\n\n    // get module\n    __getModule(moduleName) {\n      return this.app.meta.modules[moduleName];\n    }\n\n  }\n\n  return Version;\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  'module %s is old': '模块过旧',\n};\n","module.exports = {\n  1001: 'module %s is old',\n};\n","module.exports = {\n};\n"],"sourceRoot":""}